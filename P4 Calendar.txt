/* Name: Brandon Rubio*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "event.h"
#include "calendar.h"

/* Initializes a Calendar struct with provided parameters:
- Calendar struct
-Chunk of memory to hold a copy of parameter nameâ€™s string 
-Chunk of memory to hold an array of pointers to Event structs. The
length of the array is given by parameter days
*/
int init_calendar(const char *name, int days,
		  int (*comp_func) (const void *ptr1, const void *ptr2),
		  void (*free_info_func) (void *ptr), Calendar ** calendar) {
  Calendar *cal;
  char *nombre;

  if ((*calendar)!=NULL && name!=NULL && days >= 1) {

    (*calendar) = malloc(sizeof(Calendar));

    if (calendar!=NULL) {

      (*calendar)->name = malloc(sizeof(char) * (strlen(name) + 1));
      strcpy((*calendar)->name, name);

      
      (*calendar)->events = calloc(days, sizeof(Event));

      
      (*calendar)->days = days;
      (*calendar)->total_events = 0;

      (*calendar)->comp_func = comp_func;
      (*calendar)->free_info_func = free_info_func;
    }
  }else{

    return FAILURE;
  }

  return SUCCESS;
}

/* Prints to the output stream the calendar information and event information */
int print_calendar(Calendar *calendar, FILE *output_stream, int print_all) {
  Event *head, *current;
  int days = 0, index = 0;

    if (calendar == NULL ||  output_stream == NULL) {
      return FAILURE;
    }

    if (print_all != 0) {
            
       fprintf(output_stream, "Calendar's Name: \"%s\"\n", calendar->name);
            
       fprintf(output_stream, "Days: %d\n", calendar->days);
           
       fprintf(output_stream, "Total Events: %d\n\n", calendar->total_events);
    }


       fprintf(output_stream, "**** Events ****\n");

       if (calendar->total_events > 0) {

         for (days = 0; days < calendar->days; days++) {  
	  

	   printf("Day %d\n", days + 1);

	   current = calendar->events[days];

           while (current) {
	   
	     fprintf(output_stream, "Event's Name: \"%s\", ", current->name);
                    
	     fprintf(output_stream, "Start_time: %d, ", current->start_time);
                    
	     fprintf(output_stream, "Duration: %d\n", current->duration_minutes);
                    
	     current = current->next;
           }
	 }
     }

    return SUCCESS;   
}

/* adds the specified event to the list associated with the day parameter */
int add_event(Calendar *calendar, const char *name, int start_time,
	      int duration_minutes, void *info, int day) {

  Event *event, *prev, *head,  *current, *temp_event; 
  int days_index = 0;

    if(calendar != NULL && name != NULL && (start_time >= 0 && start_time <= 2400)) {
      
      if(duration_minutes > 0 && day > 0 && day <= calendar->days) {
	
	if(find_event(calendar, name, &temp_event) == FAILURE) {

	  event = malloc(sizeof(Event));
	  
	  event->name = malloc(sizeof(char) * (strlen(name) + 1));

	  strcpy(event->name, name);
                
	  event->duration_minutes = duration_minutes;
	  event->start_time = start_time;
	  
	  event->info = info;

	  current = calendar->events[day - 1];

	  if (current == NULL) {
	    
	    calendar->events[day - 1] = event;
	    event->next = NULL;
	  
	  }else if (current != NULL) {

	    if(calendar->comp_func(current, event) > 0) {
	    
	      calendar->events[day - 1] = event;
	      event->next = current;
	    }else {
	    
	      prev = current;
	      current = current->next;
	      
	      while (current != NULL && calendar->comp_func(current, event) <= 0) {
	
		prev = current;
		current = current->next;
	      }
	      
	      event->next = current;
	      prev->next = event;
	    }
	  } 
	  
	  calendar->total_events = calendar->total_events + 1; 
	}
      }
    }else{
     
      return FAILURE;
    }

    return SUCCESS;
}

/* returns a pointer to the event with the specified name */
int find_event(Calendar *calendar, const char *name, Event **event) {
  Event *head, *current, *event_temp;
    int days_index = 0;

    if (calendar && name) {
      
      for (days_index = 0; days_index < calendar->days; days_index++) {

	current = calendar->events[days_index];
            
	while (current != NULL){
	
	  if(strcmp(current->name, name) == 0) {
	    break;
	  }
	  current = current->next;
	}
	
	if (current != NULL && event != NULL) {
	  *event = current;
	  return SUCCESS;
	}
      }
    }
    return FAILURE;
}

/* Searches for a specified event given throught the name parameter
and returns a pointer to the event if found */
int find_event_in_day(Calendar *calendar, const char *name, int day,
		      Event **event) {
  Event *head, *current;
  int day_index = 0;

  if (calendar == NULL  ||  name == NULL ||  day <= 0 || day > calendar->days) {
    return FAILURE;
  }
  

  for (day_index = 0; day_index < calendar->days; day_index++) {
           
    if (day_index == (day-1)) {

      current = calendar->events[day_index];

      while (current != NULL){
	if(strcmp(current->name, name) == 0) {
	  break; 
	}
	current = current->next;
      }

      if (current != NULL && event != NULL) {
	*event = current;
      }
    }
  }

  return SUCCESS;
}

/* removes an event by searching for the event in the calendar
and changing linked list order to not include the specified 
event and then frees any allocated memory associated with the event */
int remove_event(Calendar *calendar, const char *name) {
  Event **event = NULL, *head, *prev, *current;
    
  int found, day_index = 0;

    
  if (calendar == NULL  || name == NULL){
    return FAILURE;
  }  
  found = find_event(calendar, name, event); 
  
  if(found == SUCCESS) {
    return FAILURE;
  }
  
  for (day_index = 0; day_index < calendar->days; day_index++) {
     
    current = calendar->events[day_index];
            
    if (current != NULL) {
              
      if (strcmp(current->name, name) == 0) {
	calendar->events[day_index] = current->next;

	current->next = NULL;

      }else {
	
	while (current != NULL){
	  
	  if(strcmp(current->name, name) == 0) {
	    break;
	  }

	  prev = current;
	  current = current->next;
	}
                    
	prev->next = current->next;
	current->next = NULL;
      }
      
  
      free(current->name);
      
      if (calendar->free_info_func != NULL) {
	
	calendar->free_info_func(current->info);
      }

      free(current);
      calendar->total_events -= 1;
      
    }
  }
  return SUCCESS;
}

/* Searches for the specified event by the name parameter 
 and if it is found then a pointer to the event info is 
returned*/
void *get_event_info(Calendar *calendar, const char *name) {
   Event *event;
   int found = 0;

   found = find_event(calendar, name, &event);
   
   if (found == FAILURE) {
      return NULL;
   }else{
     return event->info;
   }
}


/* Removes every event and sets every event list to empty. The array of pointers
to event lists is not removed. */
int clear_calendar(Calendar *calendar) {
    int day_index = 0;

    if (calendar == NULL) {
      return FAILURE;
    }
        
    for (day_index = 0; day_index < calendar->days; day_index++) {
        
      clear_day(calendar, (day_index + 1));

    }
        
    return SUCCESS;
}


/* Removes all events for a specified day in the calendar
 and sets the event list of that day to empty */
int clear_day(Calendar *calendar, int day) {
    Event *current, *event;

    if (calendar == NULL ||  day < 1 ||  day > calendar->days) {
      return FAILURE;
    }

    if (calendar->total_events > 0) {

      current = calendar->events[day - 1];
           
      while (current != NULL) {

	event = current;
	current = current->next;


	free(event->name);

	if (calendar->free_info_func != NULL && event->info != NULL) {

	  calendar->free_info_func(event->info);
	}


	free(event);
	calendar->total_events -= 1;
      }
      
      calendar->events[day - 1] = NULL;
     
    }
    return SUCCESS;
}

/* Frees all the memory dynamically-allocated for the calendar
and its contents */
int destroy_calendar(Calendar *calendar) {

    if (calendar == NULL) {
      return FAILURE;
    }

    free(calendar->name);
    
    clear_calendar(calendar);
    

    free(calendar->events);
  
    free(calendar);


    return SUCCESS;
}
